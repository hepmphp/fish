((s, t) => {
    var l = {
        accept: ".jpg,.png,.pdf,.doc,.docx",
        btnS: "导入文件",
        btnU: "上传",
        btnD: "删除",
        btnC: "终止",
        maxCount: 3,
        naxSize: 3,
        multiple: !0,
        responseType: "text",
        timeout: 0,
        url: "",
        withCredentials: !0,
        readAs: "DataURL"
    };

    function a() {
        var s, e, i = [];
        for (s in this.files) null !== this.files[s] && (e = ['<li class="file-li over-hidden radius data-file">', '   <div class="info">', '       <p class="over-hidden ' + o(this.files[s].status) + '">', '           <span class="name-size">', '               <i class="f-size white radius ' + o(this.files[s].status, 1) + '">' + this.files[s].size + "</i>", '               <i class="f-name">' + this.files[s].name + "</i>", "           </span>", '           <span class="tips">', '               <i class="status">' + (s => {
            switch (s) {
                case"-2":
                    return "文件过大";
                case"-1":
                    return "上传失败";
                case"0":
                    return "允许上传";
                case"1":
                    return "正在上传";
                case"2":
                    return "上传成功"
            }
        })(this.files[s].status) + "</i>", '               <i class="percent">' + this.files[s].percent + "</i>", "           </span>", "       </p>", '       <div class="wrap over-hidden radius">', '           <div class="progress ' + o(this.files[s].status, 1) + '" style="width:' + this.files[s].percent + ';"></div>', "       </div>", "   </div>", '   <div class="pic-box">', '       <i class="pic no-selec' + (/data:image\//.test(this.files[s].data) ? '" style="background-image: url(' + this.files[s].data + ');"' : ' icon"') + "></i>", "   </div>", '   <div class="li-btns over-hidden">', '       <input type="checkbox" ' + (this.files[s].checked ? "checked" : "") + ' data-id="' + s + '" class="checone pointer">', '       <i data-id="' + s + '" class="deleone no-selec pointer white"></i>', "   </div>", "</li>"], i.push(e.join("")));
        this.lNode.innerHTML = i.join("")
    }

    function n(s, e) {
        if (s) {
            s = e.getAttribute("data-id");
            this.files[s] = null
        } else for (var i in this.files) null !== this.files[i] && this.files[i].checked && (this.files[i] = null);
        a.call(this), h.call(this)
    }

    function c(s, e) {
        if (s) h.call(this, e); else {
            for (var i in this.files) null !== this.files[i] && (this.files[i].checked = e.checked);
            for (var t = this.eNode.querySelectorAll(".checone"), l = 0; l < t.length; l++) t[l].checked = e.checked;
            r.call(this, e.checked ? "已选中" : "未选中")
        }
    }

    function h(s) {
        var e, i, t = !1, l = !0, n = this.eNode.querySelector(".checall");
        for (i in s && (e = s.getAttribute("data-id"), this.files[e].checked = s.checked), this.files) null !== this.files[i] && (this.files[i].checked ? t = !0 : l = !1);
        n.checked = l, r.call(this, t ? "已选中" : "未选中")
    }

    function o(s, e) {
        switch (e = e ? "bg-" : "", s) {
            case"-2":
                return e + "yellow";
            case"-1":
                return e + "red";
            case"0":
                return e + "blue";
            case"1":
            case"2":
                return e + "green"
        }
    }

    function r(s) {
        this.eNode.querySelector(".msg").innerText = s || "操作成功"
    }

    function d(s) {
        s = (s / Math.pow(1024, 2)).toFixed(2);
        return this.conf.naxSize >= s ? "0" : "-2"
    }

    s.EasyUpload = function (s, e) {
        var i;
        this.eNode = t.querySelector(s), this.eNode ? ((i = this).files = {}, i.xhrs = {}, i.id = 0, this.conf = (s => {
            if (null !== s && "object" == typeof s) for (var e in s) null != l[e] && (l[e] = s[e]);
            return l
        })(e), function () {
            var s = ['<div class="easy-upload">', '   <div class="btns">', '       <input type="file" name="file" class="file-inpt" accept="' + this.conf.accept + '"' + (this.conf.multiple ? " multiple " : "") + ' style="display: none;">', '       <input type="button" value="' + this.conf.btnS + '" class="select pointer">', '       <input type="button" value="' + this.conf.btnU + '" class="upload no-border radius pointer white bg-blue">', '       <input type="button" value="' + this.conf.btnD + '" class="delete no-border radius pointer white bg-red">', '       <input type="button" value="' + this.conf.btnC + '" class="cancel no-border radius pointer white bg-red">', '       <i class="msg new">未导入文件</i>', '       <input type="checkbox" class="checall pointer">', "   </div>", '   <ul class="file-list">', "   </ul>", "</div>"];
            this.eNode.innerHTML = s.join(""), function (s) {
                var e = this, i = null;
                i = setTimeout(function () {
                    s(e), clearTimeout(i)
                }, 0)
            }.call(this, function (s) {
                s.fNode.onchange = function () {
                    !function (s) {
                        var e = this, i = [], t = {};
                        if (s.length > this.conf.maxCount) {
                            this.onMax && this.onMax.call(e, {in: s.length, max: this.conf.maxCount});
                            for (var l = 0; l < this.conf.maxCount; l++) i.push(s[l])
                        } else i = s;
                        for (l = 0; l < i.length; l++) {
                            t[l] = new FileReader, t[l].i = l, t[l].o = {
                                id: this.id,
                                name: i[l].name,
                                type: i[l].type,
                                size: (s => {
                                    var e;
                                    return 0 === s ? "0 B" : (e = Math.floor(Math.log(s) / Math.log(1024)), (s / Math.pow(1024, e)).toPrecision(3) + ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"][e])
                                })(i[l].size),
                                checked: !1,
                                percent: "0%",
                                status: d.call(this, i[l].size),
                                source: i[l],
                                data: ""
                            }, t[l].id = this.id, this.id++, t[l].onload = function (s) {
                                this.o.data = s.target.result, e.files[this.id] = this.o, a.call(e), h.call(e), this.i == i.length - 1 && (t = null, e.fNode.value = "")
                            };
                            var n = this.conf.readAs;
                            t[l]["readAs" + n] ? t[l]["readAs" + n](i[l]) : t[l].readAsDataURL(i[l])
                        }
                    }.call(s, this.files), a.call(s), h.call(s)
                }
            })
        }.call(i), this.fNode = this.eNode.querySelector(".file-inpt"), this.lNode = this.eNode.querySelector(".file-list"), this.eNode.onclick = function (s) {
            s = s.target;
            -1 !== s.className.indexOf("select") ? i.fNode.click() : -1 !== s.className.indexOf("upload") ? function () {
                var s, e = this;
                for (s in this.xhrs.on = 0, this.xhrs.done = 0, this.files) null !== this.files[s] && this.files[s].checked && "-2" !== this.files[s].status && (this.xhrs[s] = new XMLHttpRequest, this.xhrs[s].id = this.files[s].id, this.xhrs[s].open("post", this.conf.url), this.xhrs[s].timeout = this.conf.timeout, this.xhrs[s].responseType = this.conf.responseType, this.xhrs[s].withCredentials = this.conf.withCredentials, e.setHeader && e.setHeader.call(e, this.xhrs[s]), this.xhrs[s].send(this.setData ? this.setData.call(this, this.files[s]) : this.files[s].data), this.xhrs.on++, this.files[s].status = "1", this.files[s].percent = "0%", a.call(this), this.xhrs[s].onprogress = function (s) {
                    s.lengthComputable && (s = s.loaded / s.total * 100 + "%", e.files[this.id].status = "1", e.files[this.id].percent = s, a.call(e), e.onProgress) && e.onProgress.call(e, s)
                }, this.xhrs[s].onload = function () {
                    e.xhrs.done++;
                    var s = e.setFlag && e.setFlag.call(e, this);
                    (null == s ? 200 <= this.status && this.status < 300 : s) ? e.files[this.id].status = "2" : e.files[this.id].status = "-1", a.call(e), e.onLoad && e.onLoad.call(e, this), e.xhrs.on == e.xhrs.done && (r.call(e, "上传结束"), e.onEnd && e.onEnd.call(e, this), e.xhrs = {})
                }, this.xhrs[s].onerror = function () {
                    e.xhrs.done++, e.files[this.id].status = "-1", a.call(e), e.xhrs.on == e.xhrs.done + 1 ? (r.call(e, "上传结束"), e.onEnd && e.onEnd.call(e, this), e.xhrs = {}) : e.onError && e.onError.call(e, this)
                })
            }.call(i) : -1 !== s.className.indexOf("delete") ? n.call(i, 0, s) : -1 !== s.className.indexOf("cancel") ? function () {
                var s, e = this;
                for (s in this.xhrs.con = 0, this.xhrs.cdone = 0, this.files) null !== this.files[s] && this.files[s].checked && (this.xhrs.con++, this.xhrs[s].onabort = function () {
                    e.xhrs.cdone++, e.xhrs.con == e.xhrs.cdone && r.call(e, "成功终止选中")
                }, this.xhrs[s].abort())
            }.call(i) : -1 !== s.className.indexOf("checall") ? c.call(i, 0, s) : -1 !== s.className.indexOf("checone") ? c.call(i, 1, s) : -1 !== s.className.indexOf("deleone") && n.call(i, 1, s)
        }) : alert("插件初始化id错误")
    }
})(window, document);